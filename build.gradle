plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//DB
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	//Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//ModelMapper
	implementation 'org.modelmapper:modelmapper:3.2.4'

	//pdf
	implementation 'com.itextpdf:itext7-core:7.2.5'
	implementation 'com.itextpdf:font-asian:7.2.5'

	// 2. 내장 Tomcat을 providedRuntime으로 설정
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


}


tasks.named('test') {
	useJUnitPlatform()
}

// 생성될 WAR 파일의 이름을 지정할 수 있습니다.
war {
	archiveBaseName = 'my-project'
	archiveVersion = '1.0.0'
}
